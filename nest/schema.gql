# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  """_id of user"""
  _id: ID!

  """Login"""
  login: String!

  """Length of login"""
  l: Int!

  """Sex of user"""
  sex: Boolean!

  """Number of meals of user"""
  numberOfMeals: Int!

  """Is user an Admin"""
  isAdmin: Boolean!

  """Is profile public"""
  isPublic: Boolean!

  """Is account banned"""
  isBanned: Boolean!

  """Height"""
  height: Int!

  """Twitter"""
  twitter: String!

  """Website"""
  website: String!

  """Facebook"""
  facebook: String!

  """Instagram"""
  instagram: String!

  """Name"""
  name: String!

  """Surname"""
  surname: String!

  """Description"""
  description: String!

  """Birth date"""
  birth: DateTime!

  """Expected weekly progress in weight"""
  goal: Float!

  """Date for next visit in coach"""
  coach: DateTime!

  """Is user while dieting"""
  isCoachAnalyze: Boolean!

  """Is water adder available"""
  isWaterAdder: Boolean!

  """Is workout watch available"""
  isWorkoutWatch: Boolean!

  """Is user doing extra activity"""
  isSportActive: Boolean!

  """What kind of diet user prefer"""
  kindOfDiet: Int!

  """Level of activity"""
  activityLevel: Int!

  """Gram of fiber per day"""
  fiber: Int!

  """% of carbs as sugar"""
  carbsPercentAsSugar: Int!

  """Macronutrients"""
  macronutrients: [Macronutrients!]!

  """Placeholder allowing to query for token, while login"""
  token: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Macronutrients {
  """Number of proteins per day"""
  proteins: Int!

  """Number of carbs per day"""
  carbs: Int!

  """Number of fats per day"""
  fats: Int!
}

type Product {
  """_id"""
  _id: String!

  """Created by"""
  user: User

  """Name of product"""
  name: String!

  """Number of grams per 100g/ml"""
  p: Float

  """Number of grams per 100g/ml"""
  c: Float

  """Number of grams per 100g/ml"""
  f: Float

  """Created at"""
  createdAt: DateTime

  """Last updated at"""
  updatedAt: DateTime
}

type Daily {
  """_id"""
  _id: String!

  """Daily for date"""
  whenAdded: DateTime!

  """Created by"""
  user: User!

  """Created at"""
  createdAt: DateTime

  """Last updated at"""
  updatedAt: DateTime
}

type Query {
  login(loginUserInput: LoginUserInput!): User
  logout: User
  requestRefreshPassword(requestRefreshPasswordInput: RequestRefreshPasswordInput!): User
  confirmRefreshPassword(confirmRefreshPasswordInput: ConfirmRefreshPasswordInput!): User
  products: [Product!]!
  product(_id: String!): Product!
  dailies: [Daily!]
  daily(findOneDailyInput: FindOneDailyInput!): Daily!
}

input LoginUserInput {
  """Login"""
  login: String!

  """Password"""
  password: String!
}

input RequestRefreshPasswordInput {
  """Email"""
  email: String!
}

input ConfirmRefreshPasswordInput {
  """Email"""
  email: String!

  """Refresh password token"""
  refreshPasswordToken: String!
}

input FindOneDailyInput {
  """Login"""
  login: String!

  """Day od daily"""
  whenAdded: String!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User
  confirmUser(confirmUserInput: ConfirmUserInput!): User
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(_id: String!): Product!
  createDaily(createDailyInput: CreateDailyInput!): Daily!
  updateDaily(updateDailyInput: UpdateDailyInput!): Daily!
}

input CreateUserInput {
  """Email"""
  email: String!

  """Login"""
  login: String!

  """Password"""
  password: String!

  """Sex"""
  sex: Boolean!

  """Height"""
  height: Int!

  """Birth date"""
  birth: DateTime!
}

input ConfirmUserInput {
  """Email"""
  email: String!

  """Confirmation token"""
  confirmationToken: String!
}

input CreateProductInput {
  """Name of product"""
  name: String!

  """Number of grams per 100g/ml"""
  p: Float

  """Number of grams per 100g/ml"""
  c: Float

  """Number of grams per 100g/ml"""
  f: Float
}

input UpdateProductInput {
  """Name of product"""
  name: String

  """Number of grams per 100g/ml"""
  p: Float

  """Number of grams per 100g/ml"""
  c: Float

  """Number of grams per 100g/ml"""
  f: Float
  _id: String!
}

input CreateDailyInput {
  """Daily for date"""
  whenAdded: DateTime!
}

input UpdateDailyInput {
  """_id"""
  _id: String!
}

type Subscription {
  productAdded: Product!
}